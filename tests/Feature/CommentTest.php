<?php

namespace Tests\Feature;

use App\Comment;
use App\DashboardUser;
use App\Task;
use App\User;
use Illuminate\Database\Query\Builder;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CommentTest extends TestCase
{

    use DatabaseMigrations;

    private $user;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed();

        $this->user = User::find(2);
    }


    /**
     * test user can create comment
     *
     * @return void
     */
    public function testUserCanCreateComment()
    {
        $task = Task::whereIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $form_data = ['content' => 'some text'];
        $query_params = ['task' => $task->id];

        $this->actingAs($this->user, 'api')
            ->postJson(route('comments.create', $query_params), $form_data)
            ->assertCreated()
            ->assertSee($form_data['content']);
    }


    /**
     * test user can create comment
     *
     * @return void
     */
    public function testUserCanNotCreateComment()
    {
        $task = Task::whereNotIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $form_data = ['content' => 'some text'];
        $query_params = ['task' => $task->id];

        $this->actingAs($this->user, 'api')
            ->postJson(route('comments.create', $query_params), $form_data)
            ->assertForbidden();
    }


    /**
     * test user can update comment
     *
     * @return void
     */
    public function testUserCanUpdateComment()
    {
        $comment = Comment::where('owner_id', $this->user->id)->first();

        $form_data = $comment->toArray();
        $form_data['content'] = 'anoth text';

        $query_params = ['comment' => $comment->id];

        $this->actingAs($this->user, 'api')
            ->postJson(route('comments.update', $query_params), $form_data)
            ->assertStatus(200)
            ->assertSee($form_data['content']);
    }


    /**
     * test user can update comment
     *
     * @return void
     */
    public function testUserCanNotUpdateComment()
    {
        $comment = Comment::where('owner_id', '<>', $this->user->id)->first();

        $form_data = $comment->toArray();
        $form_data['content'] = 'anoth text';

        $query_params = ['comment' => $comment->id];

        $this->actingAs($this->user, 'api')
            ->postJson(route('comments.update', $query_params), $form_data)
            ->assertForbidden();
    }


    /**
     * test user can update comment
     *
     * @return void
     */
    public function testUserCanDeleteComment()
    {
        $comment = Comment::where('owner_id', $this->user->id)->first();
        $query_params = ['comment' => $comment->id];

        $this->actingAs($this->user, 'api')
            ->deleteJson(route('comments.delete', $query_params))
            ->assertStatus(200);

        $comment = Comment::find($comment->id);
        $this->assertEmpty($comment);
    }


    /**
     * test user can update comment
     *
     * @return void
     */
    public function testUserCanNotDeleteComment()
    {
        $comment = Comment::where('owner_id', '<>', $this->user->id)->first();

        $query_params = ['comment' => $comment->id];

        $this->actingAs($this->user, 'api')
            ->deleteJson(route('comments.delete', $query_params))
            ->assertForbidden();
    }


    /**
     * @param Builder $query
     *
     * @return Builder
     */
    private function getDashboardIDForUser(Builder $query): Builder
    {
        return $query->select('dashboard_id')
            ->from((new DashboardUser)->getTable())
            ->where('user_id', $this->user->id);
    }
}
