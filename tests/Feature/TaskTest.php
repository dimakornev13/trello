<?php

namespace Tests\Feature;

use App\Column;
use App\Dashboard;
use App\DashboardUser;
use App\Task;
use App\User;
use Illuminate\Database\Query\Builder;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TaskTest extends TestCase
{

    use DatabaseMigrations;

    private $user;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed();

        $this->user = User::find(2);
    }


    public function testCreateSuccessfulTask()
    {
        $dashboard = Dashboard::where('owner_id', $this->user->id)->first();
        $column = Column::where('dashboard_id', $dashboard->id)->first();

        $data = [
            'column_id'    => $column->id,
            'title'        => 'some text',
            'description'  => 'some text',
            'dashboard_id' => $dashboard->id
        ];

        $response = $this->actingAs($this->user, 'api')
            ->postJson(route('tasks.store'), $data);

        $response
            ->assertCreated()
            ->assertSee($data['title']);
    }


    public function testCreateUnsuccessfulTask()
    {
        $dashboard = Dashboard::where('owner_id', $this->user->id)->first();
        $column = Column::where('dashboard_id', $dashboard->id)->first();

        $data = [
            'description'  => 'some text',
            'dashboard_id' => $dashboard->id
        ];

        $response = $this->actingAs($this->user, 'api')
            ->postJson(route('tasks.store'), $data);

        $response
            ->assertJsonValidationErrors(['title', 'column_id']);
    }


    public function testUserCanUpdateTask()
    {
        $dashboard = Dashboard::where('owner_id', $this->user->id)->firstOrFail();
        $task = Task::where('dashboard_id', $dashboard->id)->firstOrFail();

        $data = $task->toArray();
        $data['title'] = 'some text';

        $response = $this->actingAs($this->user, 'api')
            ->putJson(route('tasks.update', ['task' => $task->id]), $data);

        $response
            ->assertStatus(200)
            ->assertSee($data['title']);
    }


    public function testUserCanNotUpdateTask()
    {
        $task = Task::whereNotIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $data = $task->toArray();
        $data['title'] = 'some text';

        $response = $this->actingAs($this->user, 'api')
            ->putJson(route('tasks.update', ['task' => $task->id]), $data);

        $response->assertForbidden();
    }


    public function testUserCanDeleteTask()
    {
        $task = Task::whereIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $response = $this->actingAs($this->user, 'api')
            ->deleteJson(route('tasks.destroy', ['task' => $task->id]));

        $response
            ->assertStatus(200);
    }


    public function testUserCanNotDeleteTask()
    {
        $task = Task::whereNotIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $response = $this->actingAs($this->user, 'api')
            ->deleteJson(route('tasks.destroy', ['task' => $task->id]));

        $response
            ->assertForbidden();
    }


    public function testUserCanSortTasks()
    {
        $column = Column::whereIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $required = ['column' => $column->id];
        $data = [
            'set' => Task::where('column_id', $column->id)->get()->pluck('id')->toArray()
        ];

        $response = $this->actingAs($this->user, 'api')
            ->putJson(route('tasks.sort', $required), $data);

        Task::where('column_id', $column->id)
            ->each(function ($task) use ($data) {
                $expected = array_search($task->id, $data['set']);

                $this->assertEquals($expected, $task->sort);
            });

        $response
            ->assertStatus(200);
    }


    public function testUserMoveTaskToAnotherColumn()
    {
        $this->withoutExceptionHandling();

        $columnOld = Column::whereIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->first();

        $task = Task::where('column_id', $columnOld->id)->first();

        $columnNew = Column::whereIn('dashboard_id', function ($query) {
            return $this->getDashboardIDForUser($query);
        })->where('id', '<>', $columnOld->id)->first();

        $required = [
            'column' => $columnNew->id,
            'task'   => $task->id
        ];

        $response = $this->actingAs($this->user, 'api')
            ->putJson(route('tasks.move', $required));

        $task = Task::find($task->id);

        $this->assertEquals($columnNew->id, $task->column_id);

        $response->assertStatus(200);
    }


    /**
     * @param Builder $query
     *
     * @return Builder
     */
    private function getDashboardIDForUser(Builder $query): Builder
    {
        return $query->select('dashboard_id')
            ->from((new DashboardUser)->getTable())
            ->where('user_id', $this->user->id);
    }
}
